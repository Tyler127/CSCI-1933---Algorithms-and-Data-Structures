Method:                      ArrayList Runtime:       LinkedList Runtime:      Explanation:
boolean add(T element)             O(1)                      O(1)                 Array:Does not deal with any loops. it just checks if the element to be added is null, if the array needs more space, and then adds the element at teh end of the list.
                                                                                  Linked List: no loops are used for this method. A tail variable is used to point to the node at the end of the list and therefore when something is added, it is a O(1) operation

boolean pairSwap()                 O(n)                      O(n)                 Array:Only had 1 loop, that is half the length of the filled section of the list. Otherwise deals in constants as it holds the itam at j(which is 1 less than i) and then swaps it with i in place.
                                                                                  Linked List: 


void merge()                       O(n)                      O(n)                 Array:Only has 1 loop, and a few if statements to handle cases. Loops as many times as the new array has indexes, and determines if it needs to add an element from the "this" list or the "other" list, based on whichever is smaller to keep the sort order intact.
                                                                                  Linked List: 


void reverse()                     O(n)                      O(n)                 Array:Only has 1 loop and operates much like the pair swap method, but instead of holding and swapping the next item in the array it takes the item that is the same distance from the end of the filled section as it is from the begininng of the list.
                                                                                  Linked List: 